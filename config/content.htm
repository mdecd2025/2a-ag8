<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>2a 第８組網站: <a href="https://mdecd2025.github.io/2a-ag8/content/index.html">https://mdecd2025.github.io/2a-ag8/content/index.html</a></p>
<p>2a第８組倉儲:<a href="https://github.com/mdecd2025/2a-ag8"> https://github.com/mdecd2025/2a-ag8</a></p>
<p>組長：41223101 </p>
<p>組員：41223104、41223105</p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<p style="padding-left: 30px;"></p>
<h1>Tasks</h1>
<p>task1</p>
<p>task2</p>
<p>task3</p>
<p>task4</p>
<p>task5</p>
<p><em><strong>Q1.請用繁體中文詳細說明下列資料</strong></em></p>
<p><em><strong>A:</strong></em></p>
<h5 class="anchor-header" id="whatiswebots" name="what-is-webots">What is Webots?</h5>
<p data-end="264" data-start="0">Webots 是一款專業的移動機器人模擬軟體套件。它提供了一個快速原型開發環境，使用者可以在其中創建擁有物理屬性（如質量、關節、摩擦係數等）的 3D 虛擬世界。使用者可以新增簡單的被動物體或稱為移動機器人的主動物體。這些機器人可以擁有不同的運動方式（如輪式機器人、腿式機器人或飛行機器人）。此外，它們可能配備多種感測器和執行器設備，例如距離感測器、驅動輪、攝影機、馬達、觸碰感測器、發射器、接收器等。最後，使用者可以為每個機器人編程，以使其表現出所需的行為。Webots 包含大量的機器人模型和控制程式範例，幫助使用者快速入門。</p>
<p data-end="374" data-is-last-node="" data-is-only-node="" data-start="266">Webots 也提供多種與真實移動機器人接口的功能，因此一旦模擬機器人表現符合預期，使用者可以將其控制程式轉移到真實機器人上，如 e-puck、DARwIn-OP、Nao 等。透過相關系統，使用者也可以新增新的接口。</p>
<h5 class="anchor-header" id="whatcanidowithwebots" name="what-can-i-do-with-webots">What can I do with Webots?</h5>
<article class="group/turn w-full text-token-text-primary focus-visible:outline-2 focus-visible:outline-offset-[-4px]" data-scroll-anchor="true" data-testid="conversation-turn-4" dir="auto" tabindex="-1">
<div class="text-base my-auto mx-auto py-[18px] px-6">
<div class="mx-auto flex flex-1 text-base gap-4 md:gap-5 lg:gap-6 md:max-w-3xl">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn @xs/thread:px-0 @sm/thread:px-1.5 @md/thread:px-4">
<div class="flex-col gap-1 md:gap-3">
<div class="flex max-w-full flex-col flex-grow">
<div class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-author-role="assistant" data-message-id="4c584329-7499-4d0c-8e3e-2c1226ed5509" data-message-model-slug="gpt-4o-mini" dir="auto">
<div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p data-end="61" data-start="0">Webots 非常適合用於與移動機器人相關的研究與教育專案。許多移動機器人專案多年來一直依賴 Webots，涵蓋以下領域：</p>
<ul data-end="271" data-is-last-node="" data-is-only-node="" data-start="63">
<li data-end="106" data-start="63">移動機器人原型開發（學術研究、汽車工業、航空航太、吸塵器產業、玩具產業、愛好者等）</li>
<li data-end="137" data-start="107">機器人運動學研究（腿式機器人、仿人機器人、四足機器人等）</li>
<li data-end="164" data-start="138">多代理系統研究（群體智慧、協作移動機器人群體等）</li>
<li data-end="191" data-start="165">自適應行為研究（遺傳算法、神經網絡、人工智慧等）</li>
<li data-end="233" data-start="192">機器人教學（機器人學課程、C/C++/Java/Python 程式設計課程等）</li>
<li data-end="271" data-is-last-node="" data-start="234">機器人競賽（例如 Robotstadium 或 Rat's Life）</li>
</ul>
<h5 class="anchor-header" id="whatdoineedtoknowtousewebots" name="what-do-i-need-to-know-to-use-webots">What do I need to know to use Webots?</h5>
<article class="group/turn w-full text-token-text-primary focus-visible:outline-2 focus-visible:outline-offset-[-4px]" data-scroll-anchor="true" data-testid="conversation-turn-6" dir="auto" tabindex="-1">
<div class="text-base my-auto mx-auto py-[18px] px-6">
<div class="mx-auto flex flex-1 text-base gap-4 md:gap-5 lg:gap-6 md:max-w-3xl">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn @xs/thread:px-0 @sm/thread:px-1.5 @md/thread:px-4">
<div class="flex-col gap-1 md:gap-3">
<div class="flex max-w-full flex-col flex-grow">
<div class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-author-role="assistant" data-message-id="2fde0c65-2ca3-4b3e-a0a3-248c199c4cb2" data-message-model-slug="gpt-4o-mini" dir="auto">
<div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]">
<div class="markdown prose w-full break-words dark:prose-invert light">
<ul data-end="289" data-is-last-node="" data-is-only-node="" data-start="25">
<li data-end="159" data-start="25">若要編寫您自己的機器人控制程式，您需要具備基本的 C、C++、Java、Python 或 MATLAB 程式設計語言知識。然而，即使您不熟悉這些語言，您仍然可以使用一種簡單的圖形程式設計語言 BotStudio 來編程 e-puck 和 Hemisson 機器人。</li>
<li data-end="289" data-is-last-node="" data-start="160">如果您不想使用 Webots 提供的現有機器人模型，而是希望創建自己的機器人模型，或在模擬環境中添加特殊物體，您將需要具備基本的 3D 電腦圖形和 VRML97 描述語言知識。這將使您能夠在 Webots 中創建 3D 模型或從 3D 建模軟體匯入模型。<br/><br/></li>
</ul>
<h5 class="anchor-header" id="howdoigetusersupport" name="how-do-i-get-user-support">How do I get User Support?</h5>
<article class="group/turn w-full text-token-text-primary focus-visible:outline-2 focus-visible:outline-offset-[-4px]" data-scroll-anchor="true" data-testid="conversation-turn-8" dir="auto" tabindex="-1">
<div class="text-base my-auto mx-auto py-[18px] px-6">
<div class="mx-auto flex flex-1 text-base gap-4 md:gap-5 lg:gap-6 md:max-w-3xl">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn @xs/thread:px-0 @sm/thread:px-1.5 @md/thread:px-4">
<div class="flex-col gap-1 md:gap-3">
<div class="flex max-w-full flex-col flex-grow">
<div class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-author-role="assistant" data-message-id="c2faa70e-a3d9-47bc-a36b-8e6ee88c326c" data-message-model-slug="gpt-4o-mini" dir="auto">
<div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p data-end="67" data-start="0">Cyberbotics 提供透過其 Premier Service 計劃和 Custom Development 服務的付費用戶支援。</p>
<p data-end="107" data-start="69">此外，還可以在各種地方獲得基於社群的支援，但無法保證您一定能得到問題的答案：</p>
<ul data-end="298" data-is-last-node="" data-is-only-node="" data-start="109">
<li data-end="174" data-start="109">標註有 Webots 標籤的 Robotics StackExchange 可能是提出有關 Webots 技術問題的最佳場所。</li>
<li data-end="222" data-start="175">GitHub Discussions 可用於提出與 Webots 開發及其文檔相關的問題。</li>
<li data-end="261" data-start="223">GitHub Issues 應僅用於報告在 Webots 中發現的錯誤。</li>
<li data-end="298" data-is-last-node="" data-start="262">Discord 可用於快速提問和與 Webots 社群進行即興討論。</li>
</ul>
</div>
</div>
</div>
</div>
<div class="mt-3 w-full empty:hidden">
<div class="text-center">
<h5 class="anchor-header" id="webotssimulation" name="webots-simulation">Webots Simulation</h5>
</div>
</div>
</div>
<div class="absolute">
<p data-end="22" data-start="0">一個 Webots 模擬由以下幾個項目組成：</p>
<ul data-end="209" data-is-last-node="" data-is-only-node="" data-start="24">
<li data-end="106" data-start="24">一個 Webots 世界檔案（.wbt），定義了其中一個或多個機器人及其環境。該 .wbt 檔案有時會依賴於外部的 PROTO 檔案（.proto）和材質檔案。</li>
<li data-end="161" data-start="107">一個或多個控制程式，用於控制上述機器人（支援 C/C++/Java/Python/MATLAB 語言）。</li>
<li data-end="209" data-is-last-node="" data-start="162">一個可選的物理插件，可以用來修改 Webots 預設的物理行為（使用 C/C++ 編寫）。</li>
</ul>
<h5 class="anchor-header" id="whatisaworld" name="what-is-a-world">What is a World?</h5>
<p class="anchor-header" name="what-is-a-world">在 Webots 中，世界是一個 3D 描述，定義了機器人及其環境的屬性。它包含了每個物體的描述：位置、方向、幾何形狀、外觀（如顏色或亮度）、物理屬性、物體類型等。世界是以層級結構組織的，其中物體可以包含其他物體（如同在 VRML97 中）。例如，一個機器人可以包含兩個輪子、一個距離感測器和一個關節，而該關節本身又包含一個攝影機等。世界檔案不包含機器人的控制程式碼；它只指定每個機器人所需的控制程式名稱。世界檔案儲存在 ".wbt" 檔案中，並且這些 ".wbt" 檔案儲存在每個 Webots 專案的 "worlds" 子目錄中。</p>
</div>
</div>
</div>
</div>
</article>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</article>
<div aria-hidden="true" class="pointer-events-none h-px w-px" data-edge="true">
<h5 class="anchor-header" id="whatisacontroller" name="what-is-a-controller">What is a Controller?</h5>
</div>
</div>
</div>
</div>
</div>
<div class="mb-2 flex gap-3 -ml-2">
<div class="flex items-center justify-start rounded-xl p-1">
<div>
<div class="flex items-center">
<p data-end="187" data-start="0">控制程式是控制在世界檔案中指定的機器人的電腦程式。控制程式可以用 Webots 支援的任何程式語言編寫：C、C++、Java、Python 或 MATLAB。當模擬啟動時，Webots 會啟動指定的控制程式，每個控制程式作為一個獨立的進程運行，並將這些控制程式進程與模擬中的機器人關聯起來。需要注意的是，多個機器人可以使用相同的控制程式碼，但每個機器人會啟動一個獨立的進程。</p>
<p data-end="441" data-start="189">一些程式語言需要編譯（如 C 和 C++），其他語言需要解釋執行（如 Python 和 MATLAB），還有一些則需要同時進行編譯和解釋執行（如 Java）。例如，C 和 C++ 控制程式會被編譯成與平台相關的二進位可執行檔案（例如，在 Windows 下是 ".exe" 檔案）。Python 和 MATLAB 控制程式由對應的執行時系統解釋執行（必須安裝相應的系統）。Java 控制程式則需要先編譯成位元碼（".class" 檔案或 ".jar" 檔案），然後由 Java 虛擬機（JVM）解釋執行。</p>
<p data-end="518" data-is-last-node="" data-is-only-node="" data-start="443">每個控制程式的源碼檔案和二進位檔案會一起存放在一個控制程式目錄中。該控制程式目錄位於每個 Webots 專案的 "controllers" 子目錄下。</p>
<h5 class="anchor-header" id="whatisasupervisorcontroller" name="what-is-a-supervisor-controller">What is a Supervisor Controller?</h5>
<p data-end="518" data-is-last-node="" data-is-only-node="" data-start="443">Supervisor 控制程式是當機器人的 supervisor 欄位設置為 TRUE 時的控制程式，它可以執行通常只有人類操作員才能執行的操作，而不是由真實機器人來完成。Supervisor 控制程式可以用上述提到的任何程式語言編寫。然而，與一般的機器人控制程式不同，Supervisor 控制程式將擁有對特權操作的存取權。這些特權操作包括模擬控制，例如，將機器人移動到隨機位置、捕捉模擬畫面視頻等。</p>
<p data-end="518" data-is-last-node="" data-is-only-node="" data-start="443"></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</article>
<p data-end="374" data-is-last-node="" data-is-only-node="" data-start="266"><em><strong>Q2.重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明.</strong></em></p>
<p data-end="374" data-is-last-node="" data-is-only-node="" data-start="266"><em><strong>A:</strong></em></p>
<div class="flex flex-1 grow basis-auto flex-col overflow-hidden">
<div class="relative h-full">
<div class="flex h-full flex-col overflow-y-auto [scrollbar-gutter:stable]">
<div class="mt-1.5 flex flex-col text-sm @thread-xl/thread:pt-header-height md:pb-9">
<article class="group/turn w-full text-token-text-primary focus-visible:outline-2 focus-visible:outline-offset-[-4px]" data-scroll-anchor="true" data-testid="conversation-turn-2" dir="auto" tabindex="-1">
<div class="text-base my-auto mx-auto py-[18px] px-6">
<div class="mx-auto flex flex-1 text-base gap-4 md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn @xs/thread:px-0 @sm/thread:px-1.5 @md/thread:px-4">
<div class="flex-col gap-1 md:gap-3">
<ol data-end="699" data-start="15">
<li data-end="43" data-start="15"><strong data-end="28" data-start="18">Webots</strong><span> </span>– 專業的移動機器人模擬軟體</li>
<li data-end="66" data-start="44"><strong data-end="61" data-start="47">simulation</strong><span> </span>– 模擬</li>
<li data-end="92" data-start="67"><strong data-end="85" data-start="70">prototyping</strong><span> </span>– 原型設計</li>
<li data-end="121" data-start="93"><strong data-end="114" data-start="96">virtual worlds</strong><span> </span>– 虛擬世界</li>
<li data-end="154" data-start="122"><strong data-end="147" data-start="125">physics properties</strong><span> </span>– 物理屬性</li>
<li data-end="171" data-start="155"><strong data-end="166" data-start="158">mass</strong><span> </span>– 質量</li>
<li data-end="190" data-start="172"><strong data-end="185" data-start="175">joints</strong><span> </span>– 關節</li>
<li data-end="225" data-start="191"><strong data-end="218" data-start="194">friction coefficient</strong><span> </span>– 摩擦係數</li>
<li data-end="255" data-start="226"><strong data-end="248" data-start="229">passive objects</strong><span> </span>– 被動物件</li>
<li data-end="285" data-start="256"><strong data-end="278" data-start="260">active objects</strong><span> </span>– 主動物件</li>
<li data-end="311" data-start="286"><strong data-end="304" data-start="290">locomotion</strong><span> </span>– 移動方式</li>
<li data-end="333" data-start="312"><strong data-end="327" data-start="316">sensors</strong><span> </span>– 感測器</li>
<li data-end="358" data-start="334"><strong data-end="351" data-start="338">actuators</strong><span> </span>– 驅動裝置</li>
<li data-end="399" data-start="359"><strong data-end="389" data-start="363">emitters and receivers</strong><span> </span>– 發射器與接收器</li>
<li data-end="421" data-start="400"><strong data-end="416" data-start="404">behavior</strong><span> </span>– 行為</li>
<li data-end="445" data-start="422"><strong data-end="440" data-start="426">interfaces</strong><span> </span>– 介面</li>
<li data-end="469" data-start="446"><strong data-end="462" data-start="450">robotics</strong><span> </span>– 機器人學</li>
<li data-end="503" data-start="470"><strong data-end="495" data-start="474">adaptive behavior</strong><span> </span>– 適應性行為</li>
<li data-end="537" data-start="504"><strong data-end="529" data-start="508">genetic algorithm</strong><span> </span>– 基因演算法</li>
<li data-end="568" data-start="538"><strong data-end="561" data-start="542">neural networks</strong><span> </span>– 神經網絡</li>
<li data-end="594" data-start="569"><strong data-end="583" data-start="573">VRML97</strong><span> </span>– 虛擬現實建模語言</li>
<li data-end="619" data-start="595"><strong data-end="613" data-start="599">controller</strong><span> </span>– 控制器</li>
<li data-end="644" data-start="620"><strong data-end="639" data-start="624">compilation</strong><span> </span>– 編譯</li>
<li data-end="672" data-start="645"><strong data-end="667" data-start="649">interpretation</strong><span> </span>– 直譯</li>
<li data-end="699" data-start="673"><strong data-end="691" data-start="677">supervisor</strong><span> </span>– 監督控制器</li>
</ol>
<p class="flex max-w-full flex-col flex-grow">句子結構與文法解析：1.<span> </span><strong>Webots is a professional mobile robot simulation software package.</strong></p>
<ul data-end="938" data-start="800">
<li data-end="833" data-start="800">Webots is → 主詞 + 動詞 (簡單現在式)</li>
<li data-end="907" data-start="834">a professional mobile robot simulation software package → 補語 (名詞片語)</li>
<li data-end="938" data-start="908">is 為 be 動詞，表示 Webots 的性質</li>
</ul>
<p class="flex max-w-full flex-col flex-grow">2.<span> </span><strong>It offers a rapid prototyping environment, that allows the user to create 3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc.</strong></p>
<ul data-end="1397" data-start="1123">
<li data-end="1162" data-start="1123">It offers → 主詞 (It) + 動詞 (offers)</li>
<li data-end="1212" data-start="1163">a rapid prototyping environment → 受詞 (名詞片語)</li>
<li data-end="1295" data-start="1213">that allows the user to create 3D virtual worlds... → 闡述 "environment" 的關係子句</li>
<li data-end="1397" data-start="1296">with physics properties such as mass, joints, friction coefficients, etc<strong data-end="1375" data-start="1298">.</strong><span> </span>→ 介系詞片語，說明 3D 虛擬世界的特性</li>
</ul>
<p class="flex max-w-full flex-col flex-grow">3.<span> </span><strong>These robots can have different locomotion schemes (wheeled robots, legged robots, or flying robots).</strong></p>
<ul data-end="1695" data-start="1518">
<li data-end="1541" data-start="1518">These robots → 主詞</li>
<li data-end="1580" data-start="1542">can have → 助動詞 (can) + 動詞 (have)</li>
<li data-end="1627" data-start="1581">different locomotion schemes → 受詞 (名詞片語)</li>
<li data-end="1695" data-start="1628">括號內的 wheeled robots, legged robots, or flying robots 例舉不同移動方式</li>
</ul>
<p class="flex max-w-full flex-col flex-grow">4.<span> </span><strong>Webots contains a large number of robot models and controller program examples to help users get started.</strong></p>
<ul data-end="1985" data-start="1820">
<li data-end="1859" data-start="1820">Webots contains → 主詞 + 動詞 (簡單現在式)</li>
<li data-end="1940" data-start="1860">a large number of robot models and controller program examples → 受詞 (名詞片語)</li>
<li data-end="1985" data-start="1941">to help users get started → 不定詞短語，表示目的</li>
</ul>
<h4 data-end="2212" data-start="1992"><strong data-end="2212" data-start="1997">5. Webots also contains a number of interfaces to real mobile robots, so that once your simulated robot behaves as expected, you can transfer its control program to a real robot like e-puck, DARwIn-OP, Nao, etc.</strong></h4>
<ul data-end="2483" data-start="2213">
<li data-end="2291" data-start="2213">Webots also contains a number of interfaces to real mobile robots → 主要子句</li>
<li data-end="2358" data-start="2292">so that once your simulated robot behaves as expected → 目的從句</li>
<li data-end="2424" data-start="2359">you can transfer its control program to a real robot → 結果子句</li>
<li data-end="2483" data-start="2425">like e-puck, DARwIn-OP, Nao, etc. → 例舉 (類似於 such as)</li>
</ul>
<h4 data-end="2595" data-start="2490"><strong data-end="2595" data-start="2495">6. A world, in Webots, is a 3D description of the properties of robots and of their environment.</strong></h4>
<ul data-end="2781" data-start="2596">
<li data-end="2642" data-start="2596">A world, in Webots, is → 主詞 + 動詞 (be 動詞)</li>
<li data-end="2730" data-start="2643">a 3D description of the properties of robots and of their environment → 補語 (名詞片語)</li>
<li data-end="2781" data-start="2731">in Webots → 介系詞片語，補充 "A world" 在 Webots 中的意義</li>
</ul>
<h4 data-end="2916" data-start="2788"><strong data-end="2916" data-start="2793">7. Controllers can be written in any of the programming languages supported by Webots: C, C++, Java, Python, or MATLAB.</strong></h4>
<ul data-end="3111" data-start="2917">
<li data-end="2981" data-start="2917">Controllers can be written in → 被動語態 (助動詞 can + be + 過去分詞)</li>
<li data-end="3032" data-start="2982">any of the programming languages → 受詞 (名詞片語)</li>
<li data-end="3093" data-start="3033">supported by Webots → 過去分詞片語修飾 "programming languages"</li>
<li data-end="3111" data-start="3094">冒號 (:) 用於列舉</li>
</ul>
<h4 data-end="3223" data-start="3118"><strong data-end="3223" data-start="3123">8. The Supervisor controller is the controller of a Robot whose supervisor field is set to TRUE.</strong></h4>
<ul data-end="3411" data-start="3224">
<li data-end="3289" data-start="3224">The Supervisor controller is the controller of a Robot → 主句</li>
<li data-end="3371" data-start="3290">whose supervisor field is set to TRUE → 關係代名詞 "whose" 引導的形容詞子句，修飾 "a Robot"</li>
<li data-end="3411" data-start="3372">is set to TRUE → 被動語態 (be + 過去分詞)</li>
</ul>
<p><em><strong>Q3.請摘要出下列內容: (放入英文文章內容)</strong></em></p>
<p><em><strong>A:</strong></em>Here’s a summary of the key points about Webots:</p>
<ul data-end="1962" data-is-last-node="" data-is-only-node="" data-start="50">
<li data-end="422" data-start="50">
<p data-end="422" data-start="52"><strong data-end="71" data-start="52">What is Webots?</strong><span> </span>Webots is a professional simulation software for mobile robots that allows users to create 3D virtual environments with physical properties. It supports robots with different locomotion types (wheeled, legged, flying) and various sensors/actuators. Users can program robots to perform specific behaviors and simulate them in realistic environments.</p>
</li>
<li data-end="785" data-start="424">
<p data-end="512" data-start="426"><strong data-end="443" data-start="426">Applications:</strong><span> </span>Webots is widely used in research and education, particularly for:</p>
<ul data-end="785" data-start="515">
<li data-end="541" data-start="515">Mobile robot prototyping</li>
<li data-end="598" data-start="544">Locomotion research (e.g., legged robots, humanoids)</li>
<li data-end="689" data-start="601">Multi-agent and adaptive behavior research (e.g., swarm intelligence, neural networks)</li>
<li data-end="759" data-start="692">Teaching robotics (programming in languages like C, Python, Java)</li>
<li data-end="785" data-start="762">Robotics competitions</li>
</ul>
</li>
<li data-end="1029" data-start="787">
<p data-end="1029" data-start="789"><strong data-end="815" data-start="789">What You Need to Know:</strong><span> </span>Basic knowledge of programming languages (C, C++, Java, Python, MATLAB) is required for writing robot controllers. Basic knowledge of 3D graphics and VRML97 is needed for creating custom robot models or objects.</p>
</li>
<li data-end="1204" data-start="1031">
<p data-end="1204" data-start="1033"><strong data-end="1050" data-start="1033">User Support:</strong><span> </span>Cyberbotics offers paid support. For community-based support, users can turn to Robotics StackExchange, GitHub Discussions, GitHub Issues, and Discord.</p>
</li>
<li data-end="1476" data-start="1206">
<p data-end="1269" data-start="1208"><strong data-end="1234" data-start="1208">Simulation Components:</strong><span> </span>A Webots simulation consists of:</p>
<ul data-end="1476" data-start="1272">
<li data-end="1340" data-start="1272">A world file (.wbt) that defines the robots and their environment.</li>
<li data-end="1426" data-start="1343">Controller programs written in supported languages (C/C++, Java, Python, MATLAB).</li>
<li data-end="1476" data-start="1429">Optional physics plugins for custom behavior.</li>
</ul>
</li>
<li data-end="1717" data-start="1478">
<p data-end="1717" data-start="1480"><strong data-end="1505" data-start="1480">World and Controller:</strong><span> </span>A world in Webots describes the robots and their environment (position, appearance, physics, etc.). The controller is a program that controls the robot’s actions, and each robot can have a separate controller.</p>
</li>
<li data-end="1962" data-is-last-node="" data-start="1719">
<p data-end="1962" data-is-last-node="" data-start="1721"><strong data-end="1747" data-start="1721">Supervisor Controller:</strong><span> </span>A Supervisor controller is a special type of controller that allows for privileged operations, like controlling the simulation, changing robot positions, or capturing videos, and is used to oversee robot actions.</p>
</li>
</ul>
<p></p>
<p><em><strong>Q4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</strong></em></p>
<p data-end="29" data-start="0"><em><strong>A:</strong></em>以下是文章中重要的英文單字與解釋，以及它們在文句中的用法：</p>
<p><br/><span>1. </span><strong data-end="55" data-start="36">Simulation (模擬)</strong><span></span></p>
<ul data-end="213" data-start="59">
<li data-end="90" data-start="59"><strong data-end="67" data-start="61">解釋</strong>: 創建虛擬環境來模擬現實世界中的行為或系統。</li>
<li data-end="169" data-start="94"><strong data-end="102" data-start="96">用法</strong>: "Webots is a professional simulation software for mobile robots."</li>
<li data-end="213" data-start="173"><strong data-end="181" data-start="175">解釋</strong>: 指創建虛擬的 3D 世界，讓機器人可以在其中進行測試和互動。</li>
</ul>
<p><br/><span>2. </span><strong data-end="243" data-start="222">Locomotion (運動機制)</strong><span></span></p>
<ul data-end="414" data-start="247">
<li data-end="282" data-start="247"><strong data-end="255" data-start="249">解釋</strong>: 機器人移動的能力或機制，如輪式、腿式或飛行機器人。</li>
<li data-end="375" data-start="286"><strong data-end="294" data-start="288">用法</strong>: "It supports robots with different locomotion types (wheeled, legged, flying)."</li>
<li data-end="414" data-start="379"><strong data-end="387" data-start="381">解釋</strong>: 描述機器人如何移動，無論是使用輪子、腿部還是飛行。</li>
</ul>
<p><br/><span>3. </span><strong data-end="440" data-start="423">Sensors (感測器)</strong><span></span></p>
<ul data-end="589" data-start="444">
<li data-end="479" data-start="444"><strong data-end="452" data-start="446">解釋</strong>: 用來偵測物理屬性（例如距離、運動、溫度等）的裝置。</li>
<li data-end="545" data-start="483"><strong data-end="491" data-start="485">用法</strong>: "It supports robots with various sensors/actuators."</li>
<li data-end="589" data-start="549"><strong data-end="557" data-start="551">解釋</strong>: 指幫助機器人收集周圍環境資訊的硬體裝置，如相機或距離感測器。</li>
</ul>
<p><br/><span>4. </span><strong data-end="617" data-start="598">Actuators (執行器)</strong><span></span></p>
<ul data-end="768" data-start="621">
<li data-end="657" data-start="621"><strong data-end="629" data-start="623">解釋</strong>: 根據控制器指令執行動作的裝置，例如馬達、輪子或手臂。</li>
<li data-end="723" data-start="661"><strong data-end="669" data-start="663">用法</strong>: "It supports robots with various sensors/actuators."</li>
<li data-end="768" data-start="727"><strong data-end="735" data-start="729">解釋</strong>: 這些是讓機器人與環境互動的元件，例如移動的部件或執行特定動作。</li>
</ul>
<p><br/><span>5. </span><strong data-end="799" data-start="777">Programming (程式設計)</strong><span></span></p>
<ul data-end="967" data-start="803">
<li data-end="831" data-start="803"><strong data-end="811" data-start="805">解釋</strong>: 撰寫程式碼來控制機器人或系統的行為。</li>
<li data-end="931" data-start="835"><strong data-end="843" data-start="837">用法</strong>: "Basic knowledge of programming languages (C, C++, Java, Python, MATLAB) is required."</li>
<li data-end="967" data-start="935"><strong data-end="943" data-start="937">解釋</strong>: 編寫程式碼指示機器人如何行動或執行特定任務。</li>
</ul>
<p><br/><span>6. </span><strong data-end="998" data-start="976">Prototyping (原型設計)</strong><span></span></p>
<ul data-end="1132" data-start="1002">
<li data-end="1029" data-start="1002"><strong data-end="1010" data-start="1004">解釋</strong>: 設計和測試機器人或系統的初步版本。</li>
<li data-end="1096" data-start="1033"><strong data-end="1041" data-start="1035">用法</strong>: "Webots is widely used for mobile robot prototyping."</li>
<li data-end="1132" data-start="1100"><strong data-end="1108" data-start="1102">解釋</strong>: 創建機器人的初步模型或草圖，用於測試和開發。</li>
</ul>
<p><br/><span>7. </span><strong data-end="1162" data-start="1141">Multi-agent (多代理)</strong><span></span></p>
<ul data-end="1341" data-start="1166">
<li data-end="1199" data-start="1166"><strong data-end="1174" data-start="1168">解釋</strong>: 指多個自主實體或機器人一起工作或在系統中互動。</li>
<li data-end="1302" data-start="1203"><strong data-end="1211" data-start="1205">用法</strong>: "Multi-agent and adaptive behavior research (e.g., swarm intelligence, neural networks)."</li>
<li data-end="1341" data-start="1306"><strong data-end="1314" data-start="1308">解釋</strong>: 涉及多個機器人協作、共享數據或共同完成目標的研究。</li>
</ul>
<p><br/><span>8. </span><strong data-end="1379" data-start="1350">Adaptive Behavior (適應性行為)</strong><span></span></p>
<ul data-end="1556" data-start="1383">
<li data-end="1419" data-start="1383"><strong data-end="1391" data-start="1385">解釋</strong>: 系統（機器人）根據環境變化或經驗來調整其行為的能力。</li>
<li data-end="1506" data-start="1423"><strong data-end="1431" data-start="1425">用法</strong>: "Adaptive behavior research (e.g., swarm intelligence, neural networks)."</li>
<li data-end="1556" data-start="1510"><strong data-end="1518" data-start="1512">解釋</strong>: 聚焦於機器人如何透過學習或 AI 調整行為，例如使用機器學習或神經網絡。</li>
</ul>
<p><br/><span>9. </span><strong data-end="1585" data-start="1565">Controller (控制器)</strong><span></span></p>
<ul data-end="1750" data-start="1589">
<li data-end="1610" data-start="1589"><strong data-end="1597" data-start="1591">解釋</strong>: 控制機器人行為的程式。</li>
<li data-end="1707" data-start="1614"><strong data-end="1622" data-start="1616">用法</strong>: "Controller programs written in supported languages (C/C++, Java, Python, MATLAB)."</li>
<li data-end="1750" data-start="1711"><strong data-end="1719" data-start="1713">解釋</strong>: 指控制機器人所需執行的程式，包括它們的移動和與環境的互動。</li>
</ul>
<p><br/><span>10. </span><strong data-end="1782" data-start="1760">VRML97 (VRML97 語言)</strong><span></span></p>
<ul data-end="1986" data-start="1786">
<li data-end="1825" data-start="1786"><strong data-end="1794" data-start="1788">解釋</strong>: 用於描述 3D 模型和環境的標準，特別用於虛擬現實或模擬。</li>
<li data-end="1937" data-start="1829"><strong data-end="1837" data-start="1831">用法</strong>: "Basic knowledge of 3D graphics and VRML97 is needed for creating custom robot models or objects."</li>
<li data-end="1986" data-start="1941"><strong data-end="1949" data-start="1943">解釋</strong>: 指 3D 模型描述語言，讓使用者可以創建或匯入自訂的機器人模型或物件。</li>
</ul>
<p>Q5:</p>
<p>請詳細說明如何採手動方式在 Webots 建立下列場景: 建立 Webots 桌上籃球遊戲機模擬系統</p>
<ol data-end="234" data-start="149">
<li data-end="196" data-start="149">建立新的 Webots 世界：打開 Webots，選擇<span> </span><strong data-end="195" data-start="165">File &gt; New World</strong></li>
<li data-end="234" data-start="197">選擇<span> </span><strong data-end="224" data-start="203">空白世界（Empty World）</strong>，確保場景從零開始</li>
<li data-end="341" data-start="276">添加桌面：在<span> </span><strong data-end="300" data-start="281">場景樹（Scene Tree）</strong>，右鍵點擊<span> </span><code data-end="317" data-start="306">WorldInfo</code>，選擇<span> </span><strong data-end="340" data-start="321">Add New &gt; Solid</strong>。</li>
<li data-end="384" data-start="342">設置名稱為<span> </span><code data-end="368" data-start="351">BasketballTable</code>，確保它是靜態物件（不會移動）。</li>
<li data-end="509" data-start="385">在<span> </span><code data-end="400" data-start="390">geometry</code><span> </span>選擇<span> </span><code data-end="409" data-start="404">Box</code>：<br/><code data-end="440" data-start="416">size = (1.2, 0.8, 0.1)</code>（設置長 1.2m，寬 0.8m，厚度 0.1m）。<br/><code data-end="500" data-start="472">translation = (0, 0, 0.05)</code>（使其稍微浮起）。</li>
<li data-end="592" data-start="510">在<span> </span><code data-end="527" data-start="515">appearance</code>，添加<span> </span><code data-end="541" data-start="531">Material</code>：<br/><code data-end="580" data-start="548">diffuseColor = (0.6, 0.4, 0.2)</code>（類似木製桌子的顏色）。</li>
<li data-end="909" data-start="636">
<p data-end="656" data-start="639"><strong data-end="656" data-start="639">籃板（Backboard）</strong></p>
右鍵<span> </span><code data-end="682" data-start="665">BasketballTable</code>，選擇<span> </span><strong data-end="705" data-start="686">Add New &gt; Solid</strong>。<br/>設定<span> </span><code data-end="733" data-start="715">name = Backboard</code>，<code data-end="750" data-start="734">geometry = Box</code>：<code data-end="784" data-start="759">size = (0.4, 0.01, 0.3)</code>（寬 40cm，厚 1cm，高 30cm）。<br/><code data-end="845" data-start="814">translation = (0, -0.35, 0.3)</code>（放在桌子後面）。<br/>在<span> </span><code data-end="874" data-start="862">appearance</code><span> </span>設置<span> </span><code data-end="904" data-start="878">diffuseColor = (1, 1, 1)</code>（白色）。</li>
<li data-end="1074" data-start="911">
<p data-end="926" data-start="914"><strong data-end="926" data-start="914">籃框（Hoop）</strong></p>
右鍵<span> </span><code data-end="946" data-start="935">Backboard</code>，選擇<span> </span><strong data-end="969" data-start="950">Add New &gt; Shape</strong>，選擇<span> </span><code data-end="980" data-start="973">Torus</code>（圓環）。設置<span> </span><code data-end="1009" data-start="994">radius = 0.07</code>，<code data-end="1029" data-start="1010">thickness = 0.005</code>，<code data-end="1062" data-start="1030">translation = (0, -0.02, -0.1)</code><span> </span>讓籃框固定在籃板下方。</li>
<li data-end="1180" data-start="1076">
<p data-end="1090" data-start="1079"><strong data-end="1090" data-start="1079">籃網（Net）</strong></p>
由於 Webots 沒有內建的網狀物，我們可以用細圓柱來模擬：在<span> </span><code data-end="1141" data-start="1135">Hoop</code><span> </span>內，添加多個<span> </span><code data-end="1159" data-start="1149">Cylinder</code><span> </span>作為網柱（直徑 1cm，高 10cm）。</li>
<li data-end="1180" data-start="1076">
<h4 data-end="1215" data-start="1187"><strong data-end="1215" data-start="1190">添加籃球（Basketball）</strong></h4>
在<span> </span><code data-end="1233" data-start="1221">Scene Tree</code>，右鍵<span> </span><code data-end="1248" data-start="1237">WorldInfo</code>，選擇<span> </span><strong data-end="1271" data-start="1252">Add New &gt; Solid</strong>。<br/>設定名稱為<span> </span><code data-end="1294" data-start="1282">Basketball</code>，在<span> </span><code data-end="1307" data-start="1297">geometry</code><span> </span>選擇<span> </span><code data-end="1319" data-start="1311">Sphere</code>：<code data-end="1341" data-start="1326">radius = 0.07</code>（籃球的大小）。<code data-end="1385" data-start="1355">translation = (0, 0.2, 0.07)</code>（擺放在桌面上）。<br/>在<span> </span><code data-end="1409" data-start="1400">physics</code><span> </span>啟用<span> </span><code data-end="1428" data-start="1413">mass = 0.6 kg</code>，設置彈性係數：<code data-end="1456" data-start="1442">bounce = 0.8</code>（讓籃球更有彈性）。<br/>在<span> </span><code data-end="1484" data-start="1472">appearance</code><span> </span>設置<span> </span><code data-end="1516" data-start="1488">diffuseColor = (1, 0.5, 0)</code>（橙色）</li>
<li data-end="1180" data-start="1076">增加發球裝置：在<span> </span><code data-end="1574" data-start="1562">Scene Tree</code>，右鍵<span> </span><code data-end="1589" data-start="1578">WorldInfo</code>，選擇<span> </span><strong data-end="1612" data-start="1593">Add New &gt; Solid</strong>。<br/>設定名稱為<span> </span><code data-end="1633" data-start="1623">Launcher</code>，在<span> </span><code data-end="1646" data-start="1636">geometry</code><span> </span>選擇<span> </span><code data-end="1655" data-start="1650">Box</code>：<br/><code data-end="1687" data-start="1662">size = (0.1, 0.2, 0.05)</code>。<br/><code data-end="1724" data-start="1694">translation = (0, 0.3, 0.05)</code>（放置在桌面前方）。<br/>添加<span> </span><strong data-end="1756" data-start="1741">LinearMotor</strong>：<br/>右鍵<span> </span><code data-end="1776" data-start="1766">Launcher</code>，選擇<span> </span><strong data-end="1805" data-start="1780">Add New &gt; LinearMotor</strong>。<br/>設定<span> </span><code data-end="1829" data-start="1815">maxForce = 5</code>，確保可以推動籃球。</li>
<li data-end="1180" data-start="1076">
<h4 data-end="1866" data-start="1846">設定遊戲物理特性</h4>
<strong data-end="1901" data-start="1870">檢查所有<span> </span><code data-end="1884" data-start="1877">Solid</code><span> </span>是否啟用<span> </span><code data-end="1899" data-start="1890">physics</code></strong>（除<span> </span><code data-end="1921" data-start="1904">BasketballTable</code>、<code data-end="1933" data-start="1922">Backboard</code>）。<br/><strong data-end="1957" data-start="1939">確保籃球與籃框的碰撞層級正確</strong>：<br/><code data-end="1981" data-start="1964">contactMaterial</code><span> </span>設置適當摩擦值，以便籃球有真實滾動效果。<br/><strong data-end="2043" data-start="2006">發球機<span> </span><code data-end="2022" data-start="2012">Launcher</code><span> </span>必須包含<span> </span><code data-end="2041" data-start="2028">LinearMotor</code></strong>，否則無法發射球。</li>
<li data-end="1180" data-start="1076">
<h4 data-end="2076" data-start="2059"><strong data-end="2076" data-start="2062">測試並調整</strong></h4>
在<span> </span><strong data-end="2098" data-start="2082">工具列（Toolbar）</strong>，點擊<span> </span><strong data-end="2122" data-start="2102">Simulation &gt; Run</strong><span> </span>開始測試。<br/>如果籃球未能進入籃框：調整<span> </span><code data-end="2162" data-start="2152">Launcher</code><span> </span>的<span> </span><code data-end="2175" data-start="2165">maxForce</code><span> </span>和<span> </span><code data-end="2188" data-start="2178">velocity</code>。改變<span> </span><code data-end="2210" data-start="2198">Basketball</code><span> </span>的<span> </span><code data-end="2219" data-start="2213">mass</code><span> </span>和<span> </span><code data-end="2230" data-start="2222">bounce</code>。<br/><strong data-end="2256" data-start="2235">加入 Camera 來觀察遊戲過程</strong>：
<ul data-end="2365" data-start="2261">
<li data-end="2317" data-start="2261">在<span> </span><code data-end="2277" data-start="2265">Scene Tree</code>，右鍵<span> </span><code data-end="2292" data-start="2281">WorldInfo</code>，選擇<span> </span><strong data-end="2316" data-start="2296">Add New &gt; Camera</strong>。</li>
<li data-end="2365" data-start="2321">設置<span> </span><code data-end="2356" data-start="2326">translation = (0, -0.6, 0.6)</code><span> </span>來模擬玩家視角。</li>
</ul>
</li>
</ol>
</div>
</div>
</div>
</div>
</article>
</div>
</div>
</div>
</div><h3>task6</h3>
<p></p>
<h1>w16</h1>
<p></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/aV5H7ZyQfA8" width="560"></iframe></p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>